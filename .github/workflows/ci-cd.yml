name: Frontend CI & Local Deploy (Local Only)

on:
  push:
    branches: [ "master", "dev" ] # 在推送到 master 或 dev 分支时触发
  workflow_dispatch: # 允许手动触发

jobs:
  build-and-deploy-local:
    # 指定在自托管运行器上运行
    runs-on: self-hosted

    # 为所有步骤设置默认 shell
    defaults:
      run:
        shell: cmd

    steps:
      # 步骤 1: 通过 SSH 检出代码（需配置 SSH 私钥到仓库 secrets）
      - name: Checkout Repository via SSH
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取完整历史，如果需要的话
          ssh-key: ${{ secrets.REPO_SSH_PRIVATE_KEY }}

      # 步骤 2: 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './CM/package-lock.json'

      # 步骤 3: 切换到 CM 目录并安装依赖
      - name: Install Dependencies
        shell: cmd
        working-directory: ./CM
        run: npm install

      # 步骤 4: 检查可用的 npm 脚本
      - name: Check Available NPM Scripts
        shell: cmd
        working-directory: ./CM
        run: |
          echo === Available NPM Scripts ===
          npm run
          echo.
          echo === Package.json Check ===
          if exist package.json (
            findstr /C:"\"scripts\"" package.json
          ) else (
            echo package.json not found!
            exit /b 1
          )

      # 步骤 5: 构建前端静态文件（带脚本检查）
      - name: Build Static Files for Production
        shell: cmd
        working-directory: ./CM
        run: |
          npm run | findstr "build" >nul
          if %errorlevel% equ 0 (
            echo Found 'build' script, running npm run build...
            npm run build
          ) else (
            npm run | findstr "dist" >nul
            if %errorlevel% equ 0 (
              echo Found 'dist' script, running npm run dist...
              npm run dist
            ) else (
              echo No build script found. Available scripts:
              npm run
              echo.
              echo Creating empty dist directory...
              if not exist dist mkdir dist
              echo Skipping build step for now...
            )
          )

      # 步骤 6: 设置镜像名称和标签
      - name: Set Image Name and Tag
        shell: cmd
        run: |
          set IMAGE_NAME=course-management-frontend
          set IMAGE_TAG=%GITHUB_SHA:~0,8%
          
          echo IMAGE_NAME_WITH_TAG=%IMAGE_NAME%:%IMAGE_TAG%>> %GITHUB_ENV%
          echo IMAGE_NAME_LATEST=%IMAGE_NAME%:latest>> %GITHUB_ENV%
          echo IMAGE_NAME=%IMAGE_NAME%>> %GITHUB_ENV%
          echo IMAGE_TAG=%IMAGE_TAG%>> %GITHUB_ENV%

      # 步骤 7: 在本地构建 Docker 镜像
      - name: Build Docker Image Locally
        shell: cmd
        working-directory: ./CM
        run: |
          echo Building image: %IMAGE_NAME_LATEST% and %IMAGE_NAME_WITH_TAG%
          docker build -t %IMAGE_NAME_LATEST% -t %IMAGE_NAME_WITH_TAG% -f Dockerfile .
          
          echo Verifying built images:
          docker images | findstr %IMAGE_NAME%

      # 步骤 8: 验证 kubectl 连接
      - name: Verify kubectl Connection
        shell: cmd
        run: |
          echo Checking kubectl connection...
          kubectl cluster-info
          kubectl get nodes

      # 步骤 9: 部署到本地 Kubernetes
      - name: Deploy to Local Kubernetes
        shell: cmd
        working-directory: ./CM
        run: |
          echo Applying all K8s manifests from k8s/ directory...
          kubectl apply -f k8s/
          
          echo Waiting for resources to be ready...
          timeout /t 5 /nobreak >nul
          
          kubectl get deployment course-management-frontend >nul 2>&1
          if %errorlevel% equ 0 (
            echo Deployment exists, updating...
            
            echo Patching Deployment to use local image pull policy...
            kubectl patch deployment/course-management-frontend -p "{\"spec\":{\"template\":{\"spec\":{\"containers\":[{\"name\":\"frontend\",\"imagePullPolicy\":\"IfNotPresent\"}]}}}}"
            
            echo Updating Deployment with new image: %IMAGE_NAME_WITH_TAG%
            kubectl set image deployment/course-management-frontend frontend=%IMAGE_NAME_WITH_TAG%
            
            echo Waiting for deployment rollout to finish...
            kubectl rollout status deployment/course-management-frontend --timeout=180s
            
            kubectl get pods -l app=course-management-frontend
          ) else (
            echo Deployment not found. Please check your k8s manifests.
            kubectl get deployments
            exit /b 1
          )

      # 步骤 10: 验证部署结果
      - name: Verify Deployment
        shell: cmd
        run: |
          echo === Deployment Summary ===
          kubectl get deployment course-management-frontend -o wide
          echo.
          echo === Pod Status ===
          kubectl get pods -l app=course-management-frontend -o wide
          echo.
          echo === Service Status ===
          kubectl get svc -l app=course-management-frontend 2>nul || echo No services found with label app=course-management-frontend
          
          echo Deployment completed successfully!